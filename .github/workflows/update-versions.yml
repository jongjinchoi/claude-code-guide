name: Update Software Versions

on:
  workflow_dispatch: # Allow manual trigger only
  # schedule:
  #   # Run every day at 00:00 UTC
  #   - cron: '0 0 * * *'

jobs:
  update-versions:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Check latest versions
      id: versions
      run: |
        # Claude Code version
        CLAUDE_VERSION=$(npm view @anthropic-ai/claude-code version)
        echo "claude_version=$CLAUDE_VERSION" >> $GITHUB_OUTPUT
        
        # Node.js LTS version
        NODE_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r '[.[] | select(.lts != false)] | .[0].version' | sed 's/^v//')
        echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
        
        # npm version
        NPM_VERSION=$(npm view npm version)
        echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
        
        # Homebrew version - Get from GitHub releases
        HOMEBREW_VERSION=$(curl -s https://api.github.com/repos/Homebrew/brew/releases/latest | jq -r '.tag_name' | sed 's/^v//' || echo "4.5.10")
        echo "homebrew_version=$HOMEBREW_VERSION" >> $GITHUB_OUTPUT
        
        # Git for Windows version - Get full version including .windows.X
        GIT_WINDOWS_FULL=$(curl -s https://api.github.com/repos/git-for-windows/git/releases/latest | jq -r '.tag_name' | sed 's/^v//')
        # Extract base version (without .windows.X) for display
        GIT_WINDOWS_BASE=$(echo "$GIT_WINDOWS_FULL" | sed 's/\.windows\.[0-9]*$//')
        echo "git_windows_full=$GIT_WINDOWS_FULL" >> $GITHUB_OUTPUT
        echo "git_windows_base=$GIT_WINDOWS_BASE" >> $GITHUB_OUTPUT
        
        # Print all versions for debugging
        echo "Claude Version: $CLAUDE_VERSION"
        echo "Node Version: $NODE_VERSION"
        echo "npm Version: $NPM_VERSION"
        echo "Homebrew Version: $HOMEBREW_VERSION"
        echo "Git Windows Full Version: $GIT_WINDOWS_FULL"
        echo "Git Windows Base Version: $GIT_WINDOWS_BASE"
    
    - name: Update version files
      run: |
        # Update guide.html
        sed -i "s|<span class=\"output claude-version\">@anthropic-ai/claude-code/[0-9.]*</span>|<span class=\"output claude-version\">@anthropic-ai/claude-code/${{ steps.versions.outputs.claude_version }}</span>|g" src/guide.html
        sed -i "s|<div class=\"result-desc claude-version\">ì˜ˆì‹œ: @anthropic-ai/claude-code/[0-9.]*</div>|<div class=\"result-desc claude-version\">ì˜ˆì‹œ: @anthropic-ai/claude-code/${{ steps.versions.outputs.claude_version }}</div>|g" src/guide.html
        
        sed -i "s|<span class=\"output node-version\">v[0-9.]*</span>|<span class=\"output node-version\">v${{ steps.versions.outputs.node_version }}</span>|g" src/guide.html
        sed -i "s|<div class=\"result-desc node-version\">ì˜ˆì‹œ: v[0-9.]*</div>|<div class=\"result-desc node-version\">ì˜ˆì‹œ: v${{ steps.versions.outputs.node_version }}</div>|g" src/guide.html
        
        sed -i "s|<span class=\"output npm-version\">[0-9.]*</span>|<span class=\"output npm-version\">${{ steps.versions.outputs.npm_version }}</span>|g" src/guide.html
        
        sed -i "s|<span class=\"output homebrew-version\">Homebrew [0-9.]*</span>|<span class=\"output homebrew-version\">Homebrew ${{ steps.versions.outputs.homebrew_version }}</span>|g" src/guide.html
        sed -i "s|<div class=\"result-desc homebrew-version\">ì˜ˆì‹œ: Homebrew [0-9.]*</div>|<div class=\"result-desc homebrew-version\">ì˜ˆì‹œ: Homebrew ${{ steps.versions.outputs.homebrew_version }}</div>|g" src/guide.html
        
        sed -i "s|<span class=\"output git-windows-version\">git version [0-9.]*\.windows\.[0-9]*</span>|<span class=\"output git-windows-version\">git version ${{ steps.versions.outputs.git_windows_full }}</span>|g" src/guide.html
        sed -i "s|<div class=\"result-desc git-windows-version\">ì˜ˆ: git version [0-9.]*</div>|<div class=\"result-desc git-windows-version\">ì˜ˆ: git version ${{ steps.versions.outputs.git_windows_base }}</div>|g" src/guide.html
    
    - name: Check for changes
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Pull Request
      if: steps.check_changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update software versions'
        title: 'ðŸ”„ Update software versions'
        body: |
          ## Software Version Updates
          
          This PR updates the following software versions in the guide:
          
          - Claude Code: `${{ steps.versions.outputs.claude_version }}`
          - Node.js: `v${{ steps.versions.outputs.node_version }}`
          - npm: `${{ steps.versions.outputs.npm_version }}`
          - Homebrew: `${{ steps.versions.outputs.homebrew_version }}`
          - Git for Windows: `${{ steps.versions.outputs.git_windows_full }}`
          
          ---
          *This PR was automatically generated by the version update workflow.*
        branch: update-versions
        delete-branch: true